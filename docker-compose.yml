version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: aivideomaker
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - aivideomaker-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d aivideomaker"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - aivideomaker-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      # Server Configuration
      ENVIRONMENT: production
      HOST: 0.0.0.0
      PORT: 8000
      DEBUG: false
      
      # Database Configuration
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-postgres123}@postgres:5432/aivideomaker
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      
      # Security
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      
      # OAuth Configuration
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      MICROSOFT_CLIENT_ID: ${MICROSOFT_CLIENT_ID}
      MICROSOFT_CLIENT_SECRET: ${MICROSOFT_CLIENT_SECRET}
      APPLE_CLIENT_ID: ${APPLE_CLIENT_ID}
      APPLE_CLIENT_SECRET: ${APPLE_CLIENT_SECRET}
      APPLE_KEY_ID: ${APPLE_KEY_ID}
      APPLE_TEAM_ID: ${APPLE_TEAM_ID}
      
      # Stripe Configuration
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      
      # Email Configuration
      EMAIL_HOST: ${EMAIL_HOST:-smtp.gmail.com}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_USERNAME: ${EMAIL_USERNAME}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      EMAIL_FROM: ${EMAIL_FROM:-noreply@aivideomaker.com}
      EMAIL_USE_TLS: ${EMAIL_USE_TLS:-true}
      
      # Admin Configuration
      ADMIN_EMAIL_ADDRESSES: ${ADMIN_EMAIL_ADDRESSES}
      
      # Application URLs
      BASE_URL: ${BASE_URL:-http://localhost:8000}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:8000}
      
      # AI Services
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      # File Upload
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-500000000}
      
      # CORS
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:8000,https://yourdomain.com}
      
    volumes:
      - app_uploads:/app/app/static/uploads
      - app_outputs:/app/app/static/outputs
      - app_temp:/app/app/static/temp
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - aivideomaker-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - app_uploads:/var/www/uploads:ro
      - app_outputs:/var/www/outputs:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - app
    networks:
      - aivideomaker-network
    restart: unless-stopped

  # Celery Worker (for background tasks)
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A app.tasks.celery worker --loglevel=info --concurrency=2
    environment:
      # Same environment as app
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-postgres123}@postgres:5432/aivideomaker
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      SECRET_KEY: ${SECRET_KEY}
      EMAIL_HOST: ${EMAIL_HOST:-smtp.gmail.com}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_USERNAME: ${EMAIL_USERNAME}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      EMAIL_FROM: ${EMAIL_FROM:-noreply@aivideomaker.com}
      EMAIL_USE_TLS: ${EMAIL_USE_TLS:-true}
      ADMIN_EMAIL_ADDRESSES: ${ADMIN_EMAIL_ADDRESSES}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    volumes:
      - app_uploads:/app/app/static/uploads
      - app_outputs:/app/app/static/outputs
      - app_temp:/app/app/static/temp
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - aivideomaker-network
    restart: unless-stopped

  # Celery Beat Scheduler (for periodic tasks)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A app.tasks.celery beat --loglevel=info
    environment:
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-postgres123}@postgres:5432/aivideomaker
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      SECRET_KEY: ${SECRET_KEY}
      EMAIL_HOST: ${EMAIL_HOST:-smtp.gmail.com}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_USERNAME: ${EMAIL_USERNAME}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      EMAIL_FROM: ${EMAIL_FROM:-noreply@aivideomaker.com}
      EMAIL_USE_TLS: ${EMAIL_USE_TLS:-true}
      ADMIN_EMAIL_ADDRESSES: ${ADMIN_EMAIL_ADDRESSES}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - aivideomaker-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  app_uploads:
  app_outputs:
  app_temp:

networks:
  aivideomaker-network:
    driver: bridge